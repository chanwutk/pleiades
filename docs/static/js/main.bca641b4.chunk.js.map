{"version":3,"sources":["components/PopupEditor.tsx","utils.ts","components/VegaLiteEditor.tsx","components/SpecPreview.tsx","components/NavigationBar.tsx","components/NewSpec.tsx","components/MainView.tsx","components/ModeBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ReactModal","setAppElement","PopupEditor","_ref","isOpen","onClose","contentLabel","value","setValue","errorMsg","react_default","a","createElement","lib_default","className","onClick","react_monaco_editor_lib_default","language","onChange","editorDidMount","editor","focus","failure","x","tag","VegaLiteEditor","showModal","setShowModal","onSuccess","_useState","useState","_useState2","Object","slicedToArray","setErrorMsg","PopupEditor_PopupEditor","toSave","result","json","JSON","parse","vl","e","SyntaxError","message","stringToSpec","SpecPreview","spec","data","active","onActivate","onModify","onDelete","_useState3","_useState4","currentSpec","setCurrentSpec","Fragment","classNames","preview","esm","stringify","VegaLiteEditor_VegaLiteEditor","barData","values","b","NavigationBar","specs","activePreview","setActivePreview","map","SpecPreview_SpecPreview","key","id","NewSpec","onAdd","MainView","ModeBar","App","currentSpecs","setCurrentSpecs","specCount","setSpecCount","NewSpec_NewSpec","concat","NavigationBar_NavigationBar","filter","ModeBar_ModeBar","MainView_MainView","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bca641b4.chunk.js","sourcesContent":["import React from 'react';\nimport ReactModal from 'react-modal';\nimport MonacoEditor, {\n  EditorDidMount,\n  ChangeHandler\n} from 'react-monaco-editor';\n\nReactModal.setAppElement('#root');\n\nexport interface IPopupEditorProps {\n  isOpen: boolean;\n  onClose: (toSave: boolean) => void;\n  contentLabel: string;\n  value: string;\n  setValue: ChangeHandler;\n  errorMsg?: string;\n}\n\nexport const PopupEditor: React.FC<IPopupEditorProps> = ({\n  isOpen,\n  onClose,\n  contentLabel,\n  value,\n  setValue,\n  errorMsg\n}) => {\n  const handleEditorDidMount: EditorDidMount = editor => {\n    editor.focus();\n  };\n\n  return (\n    <ReactModal isOpen={isOpen} contentLabel={contentLabel} className=\"modal\">\n      <div className=\"modal-toolbar\">\n        <button onClick={() => onClose(true)}>Save</button>\n        <button onClick={() => onClose(false)}>Cancel</button>\n        <span className=\"error-msg\">\n          {errorMsg ? errorMsg : null}\n        </span>\n      </div>\n      <div className=\"editor\">\n        <MonacoEditor\n          language=\"json\"\n          value={value}\n          onChange={setValue}\n          editorDidMount={handleEditorDidMount}\n        />\n      </div>\n    </ReactModal>\n  );\n};\n","export const success = <T>(x: T): Success<T> => ({ tag: 'success', value: x });\nexport const failure = <T>(x: T): Failure<T> => ({ tag: 'failure', value: x });\n","import React, { useState } from 'react';\nimport { PopupEditor } from './PopupEditor';\nimport { success, failure } from '../utils';\nimport * as vl from 'vega-lite';\n\nexport interface IVegaLiteEditorProps {\n  showModal: boolean;\n  setShowModal: (val: boolean) => void;\n  value: string;\n  setValue: (txt: string) => void;\n  contentLabel: string;\n  onSuccess: (json: any) => void;\n}\n\nexport const VegaLiteEditor: React.FC<IVegaLiteEditorProps> = ({ showModal, setShowModal, value, setValue, contentLabel, onSuccess }) => {\n\n  const [errorMsg, setErrorMsg] = useState('');\n\n  const stringToSpec = (value: string) => {\n    try {\n      const json = JSON.parse(value);\n      // TODO: can we do anything with the output of the compilation?\n      // currently we only call it for side-effect (to see if it errors or not)\n      vl.compile(json);\n      return success(json);\n    } catch (e) {\n      if (e instanceof SyntaxError) {\n        return failure(e.message);\n      } else if (e.message === 'Invalid spec') {\n        return failure(e.message);\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  const handleClose = (toSave: boolean) => {\n    if (toSave) {\n      const result = stringToSpec(value);\n      switch (result.tag) {\n        case 'success':\n          setErrorMsg('');\n          onSuccess(result.value);\n          setShowModal(false); return;\n        case 'failure':\n          setErrorMsg(result.value);\n          // NOTE: this does not close the dialog\n          return;\n      }\n    } else {\n      setErrorMsg('');\n      setShowModal(false); return;\n    }\n  }\n\n  return (\n    <PopupEditor\n      isOpen={showModal}\n      contentLabel={contentLabel}\n      onClose={handleClose}\n      value={value}\n      setValue={setValue}\n      errorMsg={errorMsg}\n    />\n  );\n};\n","import React, { useState } from 'react';\nimport { VegaLiteEditor } from './VegaLiteEditor';\nimport VegaLite from 'react-vega-lite';\nimport classNames from 'classnames';\n\nexport interface ISpecPreviewProps {\n  spec: RawSpec;\n  data: any;\n  active: boolean;\n  onActivate: () => void;\n  onModify: (json: any) => void;\n  onDelete: () => void;\n}\n\nexport const SpecPreview: React.FC<ISpecPreviewProps> = ({ spec, data, active, onActivate, onModify, onDelete }) => {\n\n  const [showModal, setShowModal] = useState(false);\n  const [currentSpec, setCurrentSpec] = useState('');\n\n  const handleModify = () => {\n    setCurrentSpec(JSON.stringify(spec.spec, null, 2));\n    setShowModal(true);\n  };\n\n  const handleDelete = () => {\n    onDelete();\n  };\n\n  return (\n    <>\n      <div\n        className={classNames({\n          'active': active,\n          'preview': true\n        })}\n        onClick={onActivate} >\n        <VegaLite spec={spec.spec} data={data} />\n        <div className=\"preview-side\">\n          <button onClick={handleModify}>\n            <i className=\"fas fa-wrench\"></i>\n          </button>\n          <button onClick={handleDelete}>\n            <i className=\"fas fa-trash\"></i>\n          </button>\n        </div>\n      </div>\n      <VegaLiteEditor\n        showModal={showModal}\n        setShowModal={setShowModal}\n        contentLabel=\"Modify Spec\"\n        onSuccess={onModify}\n        value={currentSpec}\n        setValue={setCurrentSpec}\n      />\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { SpecPreview } from './SpecPreview';\n\nexport interface INavigationBarProps {\n  specs: RawSpec[];\n  onModify: (id: number) => (json: any) => void;\n  onDelete: (id: number) => () => void;\n}\n\nconst barData = {\n  values: [\n    { a: 'A', b: 20 },\n    { a: 'B', b: 34 },\n    { a: 'C', b: 55 },\n    { a: 'D', b: 19 },\n    { a: 'E', b: 40 },\n    { a: 'F', b: 34 },\n    { a: 'G', b: 91 },\n    { a: 'H', b: 78 },\n    { a: 'I', b: 25 }\n  ]\n};\n\nexport const NavigationBar: React.FC<INavigationBarProps> = ({ specs, onModify, onDelete }) => {\n  const [activePreview, setActivePreview] = useState(null);\n\n  const handleActivate = id => () => {\n    if (activePreview === id) {\n      setActivePreview(null);\n    } else {\n      setActivePreview(id);\n    }\n  }\n\n  return (\n    <div className=\"nav-bar\">\n      {specs.map((spec) => (\n        <SpecPreview\n          key={spec.id}\n          spec={spec}\n          data={barData}\n          active={spec.id === activePreview}\n          onActivate={handleActivate(spec.id)}\n          onModify={onModify(spec.id)}\n          onDelete={onDelete(spec.id)}\n        />\n      ))}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { VegaLiteEditor } from './VegaLiteEditor';\n\nexport interface INewSpecProps {\n  onAdd: (json: any) => void;\n}\n\nexport const NewSpec: React.FC<INewSpecProps> = ({ onAdd }) => {\n\n  const [showModal, setShowModal] = useState(false);\n  const [currentSpec, setCurrentSpec] = useState('');\n\n  const handleOpen = () => {\n    setCurrentSpec('');\n    setShowModal(true);\n  };\n\n  return (\n    <>\n      <div className=\"button-group\">\n        <button id=\"btn-newspec\" onClick={handleOpen}>\n          <i className=\"fas fa-plus-circle\"></i>\n        </button>\n      </div>\n      <VegaLiteEditor\n        showModal={showModal}\n        setShowModal={setShowModal}\n        contentLabel=\"New Spec\"\n        onSuccess={onAdd}\n        value={currentSpec}\n        setValue={setCurrentSpec}\n      />\n    </>\n  );\n};\n","import React from 'react';\n\nexport const MainView: React.FC = () => {\n  return (\n    <div className=\"main-view\" />\n  );\n};\n","import React from 'react';\n\nexport const ModeBar: React.FC = () => {\n  return (\n    <div className=\"mode-bar\"></div>\n  );\n};\n","import React, { useState } from 'react';\nimport { NavigationBar } from './components/NavigationBar';\nimport { NewSpec } from './components/NewSpec';\nimport { MainView } from './components/MainView';\nimport { ModeBar } from './components/ModeBar';\nimport './App.scss';\n\nconst App: React.FC = () => {\n  const [currentSpecs, setCurrentSpecs] = useState([] as RawSpec[]);\n  const [specCount, setSpecCount] = useState(0);\n\n  const handleAdd = (json: any) => {\n    setCurrentSpecs(currentSpecs.concat([{\n      id: specCount,\n      spec: json\n    }]));\n    setSpecCount(specCount + 1);\n  };\n\n  const handleModify = (id: number) => (json: any) => {\n    setCurrentSpecs(currentSpecs.map(spec => {\n      if (spec.id === id) {\n        return {\n          id,\n          spec: json\n        };\n      } else {\n        return spec;\n      }\n    }));\n  };\n\n  const handleDelete = (id: number) => () => {\n    setCurrentSpecs(currentSpecs.filter(spec => spec.id !== id));\n  }\n\n  return (\n    <div id=\"main\">\n      <div className=\"left-side\">\n        <NewSpec onAdd={handleAdd} />\n        <NavigationBar\n          specs={currentSpecs}\n          onModify={handleModify}\n          onDelete={handleDelete} />\n\n      </div>\n      <div className=\"right-side\">\n        <ModeBar />\n        <MainView />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}