{"version":3,"sources":["components/SpecPreview.tsx","components/NavigationBar.tsx","components/PopupEditor.tsx","components/NewSpec.tsx","components/MainView.tsx","components/ModeBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SpecPreview","_ref","spec","data","active","onClick","react_default","a","createElement","className","esm","barData","values","b","NavigationBar","specs","_useState","useState","_useState2","Object","slicedToArray","activePreview","setActivePreview","handleClick","i","map","SpecPreview_SpecPreview","ReactModal","setAppElement","PopupEditor","isOpen","onClose","contentLabel","value","setValue","lib_default","react_monaco_editor_lib_default","language","onChange","editorDidMount","editor","focus","NewSpec","onAdd","showModal","setShowModal","_useState3","_useState4","currentSpec","setCurrentSpec","Fragment","id","PopupEditor_PopupEditor","toSave","MainView","ModeBar","App","currentSpecs","setCurrentSpecs","NewSpec_NewSpec","txt","json","JSON","parse","vl","concat","e","SyntaxError","message","NavigationBar_NavigationBar","ModeBar_ModeBar","MainView_MainView","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12a4cb5e.chunk.js","sourcesContent":["import React from 'react';\nimport VegaLite from 'react-vega-lite';\n\nexport interface ISpecPreviewProps {\n  spec: any;\n  data: any;\n  active: boolean;\n  onClick: () => void;\n}\n\nexport const SpecPreview: React.FC<ISpecPreviewProps> = ({ spec, data, active, onClick }) => {\n  return (\n    <div\n      className={active ? 'preview-active' : ''}\n      onClick={onClick} >\n      <VegaLite spec={spec} data={data} />\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { SpecPreview } from './SpecPreview';\n\nexport interface INavigationBarProps {\n  specs: any[]\n}\n\nconst barData = {\n  values: [\n    { a: 'A', b: 20 },\n    { a: 'B', b: 34 },\n    { a: 'C', b: 55 },\n    { a: 'D', b: 19 },\n    { a: 'E', b: 40 },\n    { a: 'F', b: 34 },\n    { a: 'G', b: 91 },\n    { a: 'H', b: 78 },\n    { a: 'I', b: 25 }\n  ]\n};\n\nexport const NavigationBar: React.FC<INavigationBarProps> = ({ specs }) => {\n  const [activePreview, setActivePreview] = useState(null);\n\n  const handleClick = i => () => {\n    if (activePreview === i) {\n      setActivePreview(null);\n    } else {\n      setActivePreview(i);\n    }\n  }\n  return (\n    <div className=\"nav-bar\">\n      {specs.map((spec, i) => (\n        <SpecPreview\n          spec={spec}\n          data={barData}\n          active={i === activePreview}\n          onClick={handleClick(i)}\n        />\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactModal from 'react-modal';\nimport MonacoEditor, {\n  EditorDidMount,\n  ChangeHandler\n} from 'react-monaco-editor';\n\nReactModal.setAppElement('#root');\n\nexport interface IPopupEditorProps {\n  isOpen: boolean;\n  onClose: (toSave: boolean) => void;\n  contentLabel: string;\n  value: string;\n  setValue: ChangeHandler;\n}\n\nexport const PopupEditor: React.FC<IPopupEditorProps> = (\n  { isOpen, onClose, contentLabel, value, setValue }\n) => {\n\n  const handleEditorDidMount: EditorDidMount = editor => {\n    editor.focus();\n  };\n\n  return (\n    <ReactModal isOpen={isOpen} contentLabel={contentLabel} className=\"modal\">\n      <div className=\"button-group\">\n        <button onClick={() => onClose(true)}>Save</button>\n        <button onClick={() => onClose(false)}>Cancel</button>\n      </div>\n      <div className=\"editor\">\n        <MonacoEditor\n          language=\"json\"\n          value={value}\n          onChange={setValue}\n          editorDidMount={handleEditorDidMount}\n        />\n      </div>\n    </ReactModal>\n  );\n};\n","import React, { useState } from 'react';\nimport { PopupEditor } from './PopupEditor';\n\nexport interface INewSpecProps {\n  onAdd: (txt: string) => boolean;\n}\n\nexport const NewSpec: React.FC<INewSpecProps> = ({ onAdd }) => {\n  const [showModal, setShowModal] = useState(false);\n  const [currentSpec, setCurrentSpec] = useState('');\n\n  const handleOpen = () => {\n    // TODO: do we want to reset the editor to blank every time we click new spec?\n    // if so, move setCurrentSpec('') below here instead.\n    setShowModal(true);\n  };\n\n  const handleClose = (toSave: boolean) => {\n    if (toSave) {\n      const isSuccessful = onAdd(currentSpec);\n      if (isSuccessful) {\n        setCurrentSpec('');\n        setShowModal(false);\n      }\n    } else {\n      setShowModal(false);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"button-group\">\n        <button id=\"btn-newspec\" onClick={handleOpen}>+</button>\n      </div>\n      <PopupEditor\n        isOpen={showModal}\n        contentLabel=\"New Spec\"\n        onClose={handleClose}\n        value={currentSpec}\n        setValue={setCurrentSpec}\n      />\n    </>\n  );\n};\n","import React from 'react';\n\nexport const MainView: React.FC = () => {\n  return (\n    <div className=\"main-view\" />\n  );\n};\n","import React from 'react';\n\nexport const ModeBar: React.FC = () => {\n  return (\n    <div className=\"mode-bar\"></div>\n  );\n};\n","import React, { useState } from 'react';\nimport { NavigationBar } from './components/NavigationBar';\nimport { NewSpec } from './components/NewSpec';\nimport { MainView } from './components/MainView';\nimport { ModeBar } from './components/ModeBar';\nimport * as vl from 'vega-lite';\nimport './App.scss';\n\nconst App: React.FC = () => {\n  const [currentSpecs, setCurrentSpecs] = useState([] as any[]);\n\n  const handleAdd = (txt: string) => {\n    try {\n      const json = JSON.parse(txt);\n      // TODO: can we do anything with the output of the compilation?\n      // currently we only call it for side-effect (to see if it errors or not)\n      vl.compile(json);\n      setCurrentSpecs(currentSpecs.concat([json]));\n      return true;\n    } catch (e) {\n      if (e instanceof SyntaxError) {\n        return false;\n      } else if (e.message === 'Invalid spec') {\n        return false;\n      } else {\n        throw e;\n      }\n    }\n  };\n\n  return (\n    <div id=\"main\">\n      <div className=\"left-side\">\n        <NewSpec onAdd={handleAdd} />\n        <NavigationBar specs={currentSpecs} />\n      </div>\n      <div className=\"right-side\">\n        <ModeBar />\n        <MainView />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}